"""
The following is AI-Generated by Gemini Pro 2.5 with the following prompt:

The following file is the basic testing for our project TinyTurns and the
classes it used to represent the player playerClass.py

It is a simple PvP Turn-Based Game that utilizes TCP, pygame, and
uses pickle to send the Class data so Client can update it.

TinyTurns should run on a Server that can be accessed by 2 clients to play the game.
The server will not start the main game function if there is only 1 client that have joined.

Create a Server.py and Client.py that replicates the file attached but with TCP connection

https://g.co/gemini/share/341434c740fc
"""

import socket
import pickle
import os

# --- Client Configuration ---
HOST = '127.0.0.1'  # The server's hostname or IP address
PORT = 65432  # The port used by the server
MAX_BUFFER_SIZE = 4096


# --- UI Functions ---
def clear_screen():
    """Clears the terminal screen."""
    os.system('cls' if os.name == 'nt' else 'clear')


def print_player_stats(player, player_name):
    """Prints the current stats of a player."""
    print(f"--- {player_name}'s Stats ---")
    print(f"HP: {int(player.currHP):,} / {player.maxHP:,}")
    print(f"SP: {player.SP} / 20")
    print(f"ATK: {player.ATK}")
    print(f"CRIT Rate: {player.CRITRate:.0%}")
    print(f"CRIT DMG: {player.CRITDMG:.0%}")
    print(f"DMG Dealt Buff: {player.DMGDealt:.0%}")
    print(f"Vulnerability Debuff: {player.vulnerability:.0%}")
    print(f"DEF: {player.DEF}")
    print("----------------------")


def get_player_action(player_name):
    """Gets the action choice from the current player."""
    print(f"\nIt's your turn, {player_name}!")
    print("Choose your action:")
    print("0: Skip Turn (0 SP)")
    print("1: Basic Attack (0 SP)")
    print("2: Heavy Attack (3 SP)")
    print("3: Debuff Enemy (6 SP, apply 50% Vulnerability & 50% DEF Down)")
    print("4: CRIT Buff (6 SP, +50% CRIT Rate & +50% CRIT DMG)")
    print("5: Enhancement (6 SP, +90% ATK & +50% DMG)")

    while True:
        choice = input("Enter your choice (0-5): ")
        if choice in ['0', '1', '2', '3', '4', '5']:
            return choice
        print("Invalid input. Please enter a number between 0 and 5.")


# --- Main Client Logic ---
def main():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        client_socket.connect((HOST, PORT))
        print("Connected to TinyTurns server...")
    except ConnectionRefusedError:
        print("Connection failed. Is the server running?")
        return

    my_player_id = 0

    # First, receive the player ID from the server
    try:
        my_player_id = pickle.loads(client_socket.recv(MAX_BUFFER_SIZE))
        print(f"You are Player {my_player_id}.")
    except Exception as e:
        print(f"Error receiving player ID: {e}")
        client_socket.close()
        return

    # Main game loop
    displayBanner: bool = True
    while True:
        try:
            # Receive game state from the server
            data = client_socket.recv(MAX_BUFFER_SIZE)
            if not data:
                print("Disconnected from server.")
                break

            game_state = pickle.loads(data)

            # Extract data
            players = game_state.get("players", {})
            current_turn = game_state.get("turn", 1)
            message = game_state.get("message", "")
            game_over = game_state.get("game_over", False)

            # --- Display UI ---
            clear_screen()
            if displayBanner:
                print("=== TinyTurns ===")
                print(f"You are Player {my_player_id}\n")
                displayBanner = False

            if players:
                print_player_stats(players[1], "Player 1")
                print_player_stats(players[2], "Player 2")

            print("\n--- Game Log ---")
            print(message)
            print("----------------\n")

            if game_over:
                print("Game Over! Thanks for playing.")
                break

            # --- Player's Turn ---
            current_player_turn = 1 if current_turn % 2 != 0 else 2

            if my_player_id == current_player_turn:
                action = get_player_action(f"Player {my_player_id}")
                client_socket.send(pickle.dumps(action))
            else:
                print("Waiting for opponent's move...")

        except (EOFError, ConnectionResetError):
            print("Connection to the server was lost.")
            break
        except Exception as e:
            print(f"An error occurred: {e}")
            break

    client_socket.close()
    print("Connection closed.")


if __name__ == "__main__":
    main()
